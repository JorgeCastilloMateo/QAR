// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dKumaraswamy
double dKumaraswamy(double x, double a, double b);
RcppExport SEXP _QAR_dKumaraswamy(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(dKumaraswamy(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// dKumaraswamyCube
arma::cube dKumaraswamyCube(arma::cube x, double a, double b);
RcppExport SEXP _QAR_dKumaraswamyCube(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(dKumaraswamyCube(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// pKumaraswamy
double pKumaraswamy(double q, double a, double b);
RcppExport SEXP _QAR_pKumaraswamy(SEXP qSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(pKumaraswamy(q, a, b));
    return rcpp_result_gen;
END_RCPP
}
// qKumaraswamy
arma::cube qKumaraswamy(arma::cube p, double a, double b);
RcppExport SEXP _QAR_qKumaraswamy(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(qKumaraswamy(p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// logdnorm
double logdnorm(double x, double sd);
RcppExport SEXP _QAR_logdnorm(SEXP xSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(logdnorm(x, sd));
    return rcpp_result_gen;
END_RCPP
}
// logdmvnorm
double logdmvnorm(arma::vec x, double mu, double sigma2, arma::mat Rinv, int n);
RcppExport SEXP _QAR_logdmvnorm(SEXP xSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP RinvSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rinv(RinvSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(logdmvnorm(x, mu, sigma2, Rinv, n));
    return rcpp_result_gen;
END_RCPP
}
// MuSigmaUpdate
Rcpp::List MuSigmaUpdate(arma::vec x, arma::vec mu, arma::mat Sigma, int n);
RcppExport SEXP _QAR_MuSigmaUpdate(SEXP xSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MuSigmaUpdate(x, mu, Sigma, n));
    return rcpp_result_gen;
END_RCPP
}
// logitInv
double logitInv(double x, double a, double b);
RcppExport SEXP _QAR_logitInv(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logitInv(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// logitInvVec
arma::vec logitInvVec(arma::vec x, double a, double b);
RcppExport SEXP _QAR_logitInvVec(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logitInvVec(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fQAR1K1
double fQAR1K1(double x, double y1, double y2, double a1, double b1, double a2, double b2);
RcppExport SEXP _QAR_fQAR1K1(SEXP xSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(fQAR1K1(x, y1, y2, a1, b1, a2, b2));
    return rcpp_result_gen;
END_RCPP
}
// brentQAR1K1
double brentQAR1K1(double y1, double y2, double a1, double b1, double a2, double b2, double tol);
RcppExport SEXP _QAR_brentQAR1K1(SEXP y1SEXP, SEXP y2SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(brentQAR1K1(y1, y2, a1, b1, a2, b2, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodQAR1K1
double logLikelihoodQAR1K1(int T, int L, arma::mat Y, double a1, double b1, double a2, double b2, double tol);
RcppExport SEXP _QAR_logLikelihoodQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodQAR1K1(T, L, Y, a1, b1, a2, b2, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallQAR1K1
double logfallQAR1K1(int T, int L, arma::vec x, arma::mat Y, double prior, double tol);
RcppExport SEXP _QAR_logfallQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP xSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallQAR1K1(T, L, x, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisQAR1K1
arma::vec rwBmetropolisQAR1K1(arma::vec x, arma::mat sd, int T, int L, arma::mat Y, double prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisQAR1K1(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisQAR1K1(x, sd, T, L, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// fQAR1K2
double fQAR1K2(double x, double y1, double y2, double a1, double b1, double a2, double b2, double a3, double b3, double a4, double b4, double pi1, double pi2);
RcppExport SEXP _QAR_fQAR1K2(SEXP xSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP a3SEXP, SEXP b3SEXP, SEXP a4SEXP, SEXP b4SEXP, SEXP pi1SEXP, SEXP pi2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type pi2(pi2SEXP);
    rcpp_result_gen = Rcpp::wrap(fQAR1K2(x, y1, y2, a1, b1, a2, b2, a3, b3, a4, b4, pi1, pi2));
    return rcpp_result_gen;
END_RCPP
}
// brentQAR1K2
double brentQAR1K2(double y1, double y2, double a1, double b1, double a2, double b2, double a3, double b3, double a4, double b4, double pi1, double pi2, double tol);
RcppExport SEXP _QAR_brentQAR1K2(SEXP y1SEXP, SEXP y2SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP a3SEXP, SEXP b3SEXP, SEXP a4SEXP, SEXP b4SEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(brentQAR1K2(y1, y2, a1, b1, a2, b2, a3, b3, a4, b4, pi1, pi2, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodQAR1K2
double logLikelihoodQAR1K2(int T, int L, arma::mat Y, double a1, double b1, double a2, double b2, double a3, double b3, double a4, double b4, double pi1, double pi2, double tol);
RcppExport SEXP _QAR_logLikelihoodQAR1K2(SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP a3SEXP, SEXP b3SEXP, SEXP a4SEXP, SEXP b4SEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodQAR1K2(T, L, Y, a1, b1, a2, b2, a3, b3, a4, b4, pi1, pi2, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallQAR1K2
double logfallQAR1K2(int T, int L, arma::vec x, arma::mat Y, double prior, double tol);
RcppExport SEXP _QAR_logfallQAR1K2(SEXP TSEXP, SEXP LSEXP, SEXP xSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallQAR1K2(T, L, x, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisQAR1K2
arma::vec rwBmetropolisQAR1K2(arma::vec x, arma::mat sd, int T, int L, arma::mat Y, double prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisQAR1K2(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisQAR1K2(x, sd, T, L, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// fQAR1K
double fQAR1K(double x, double y1, double y2, int K, arma::vec ab, arma::vec lambda, double lambda1K, double lambda2K);
RcppExport SEXP _QAR_fQAR1K(SEXP xSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP KSEXP, SEXP abSEXP, SEXP lambdaSEXP, SEXP lambda1KSEXP, SEXP lambda2KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ab(abSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1K(lambda1KSEXP);
    Rcpp::traits::input_parameter< double >::type lambda2K(lambda2KSEXP);
    rcpp_result_gen = Rcpp::wrap(fQAR1K(x, y1, y2, K, ab, lambda, lambda1K, lambda2K));
    return rcpp_result_gen;
END_RCPP
}
// brentQAR1K
double brentQAR1K(double y1, double y2, int K, arma::vec ab, arma::vec lambda, double lambda1K, double lambda2K, double tol);
RcppExport SEXP _QAR_brentQAR1K(SEXP y1SEXP, SEXP y2SEXP, SEXP KSEXP, SEXP abSEXP, SEXP lambdaSEXP, SEXP lambda1KSEXP, SEXP lambda2KSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ab(abSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1K(lambda1KSEXP);
    Rcpp::traits::input_parameter< double >::type lambda2K(lambda2KSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(brentQAR1K(y1, y2, K, ab, lambda, lambda1K, lambda2K, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodQAR1K
double logLikelihoodQAR1K(int T, int L, arma::mat Y, int K, arma::vec ab, arma::vec lambda, double tol);
RcppExport SEXP _QAR_logLikelihoodQAR1K(SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP KSEXP, SEXP abSEXP, SEXP lambdaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ab(abSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodQAR1K(T, L, Y, K, ab, lambda, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallQAR1K
double logfallQAR1K(int T, int L, arma::vec x, arma::mat Y, int K, arma::vec ab, double prior, double tol);
RcppExport SEXP _QAR_logfallQAR1K(SEXP TSEXP, SEXP LSEXP, SEXP xSEXP, SEXP YSEXP, SEXP KSEXP, SEXP abSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ab(abSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallQAR1K(T, L, x, Y, K, ab, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisQAR1K
arma::vec rwBmetropolisQAR1K(arma::vec x, arma::mat sd, int T, int L, arma::mat Y, int K, arma::vec ab, double prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisQAR1K(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP KSEXP, SEXP abSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ab(abSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisQAR1K(x, sd, T, L, Y, K, ab, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// fQAR2K1
double fQAR2K1(double x, double y1, double y2, double y3, double a1, double b1, double a2, double b2, double a3, double b3, double pi);
RcppExport SEXP _QAR_fQAR2K1(SEXP xSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP y3SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP a3SEXP, SEXP b3SEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type y3(y3SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(fQAR2K1(x, y1, y2, y3, a1, b1, a2, b2, a3, b3, pi));
    return rcpp_result_gen;
END_RCPP
}
// brentQAR2K1
double brentQAR2K1(double y1, double y2, double y3, double a1, double b1, double a2, double b2, double a3, double b3, double pi, double tol);
RcppExport SEXP _QAR_brentQAR2K1(SEXP y1SEXP, SEXP y2SEXP, SEXP y3SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP a3SEXP, SEXP b3SEXP, SEXP piSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type y3(y3SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(brentQAR2K1(y1, y2, y3, a1, b1, a2, b2, a3, b3, pi, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodQAR2K1
double logLikelihoodQAR2K1(int T, int L, arma::mat Y, double a1, double b1, double a2, double b2, double a3, double b3, double pi, double tol);
RcppExport SEXP _QAR_logLikelihoodQAR2K1(SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP a3SEXP, SEXP b3SEXP, SEXP piSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodQAR2K1(T, L, Y, a1, b1, a2, b2, a3, b3, pi, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallQAR2K1
double logfallQAR2K1(int T, int L, arma::vec x, arma::mat Y, double prior, double tol);
RcppExport SEXP _QAR_logfallQAR2K1(SEXP TSEXP, SEXP LSEXP, SEXP xSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallQAR2K1(T, L, x, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisQAR2K1
arma::vec rwBmetropolisQAR2K1(arma::vec x, arma::mat sd, int T, int L, arma::mat Y, double prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisQAR2K1(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisQAR2K1(x, sd, T, L, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMQAR1K1
double logLikelihoodMQAR1K1(int T, int L, arma::cube Y, double a1, double b1, double a2, double b2, double a3, double b3, double a4, double b4, double rho, double tol);
RcppExport SEXP _QAR_logLikelihoodMQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP a3SEXP, SEXP b3SEXP, SEXP a4SEXP, SEXP b4SEXP, SEXP rhoSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMQAR1K1(T, L, Y, a1, b1, a2, b2, a3, b3, a4, b4, rho, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallMQAR1K1
double logfallMQAR1K1(int T, int L, arma::vec x, arma::cube Y, double prior, double tol);
RcppExport SEXP _QAR_logfallMQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP xSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallMQAR1K1(T, L, x, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisMQAR1K1
arma::vec rwBmetropolisMQAR1K1(arma::vec x, arma::mat sd, int T, int L, arma::cube Y, double prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisMQAR1K1(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisMQAR1K1(x, sd, T, L, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodSQAR1K1
double logLikelihoodSQAR1K1(int T, int L, int n, arma::cube Y, double a1, double b1, double a2, double b2, double gamma, arma::mat RPhi, arma::mat I, double tol);
RcppExport SEXP _QAR_logLikelihoodSQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP nSEXP, SEXP YSEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP gammaSEXP, SEXP RPhiSEXP, SEXP ISEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RPhi(RPhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodSQAR1K1(T, L, n, Y, a1, b1, a2, b2, gamma, RPhi, I, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallSQAR1K1
double logfallSQAR1K1(int T, int L, int n, arma::vec x, arma::cube Y, arma::mat RPhi, arma::mat I, double prior, double tol);
RcppExport SEXP _QAR_logfallSQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP nSEXP, SEXP xSEXP, SEXP YSEXP, SEXP RPhiSEXP, SEXP ISEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RPhi(RPhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallSQAR1K1(T, L, n, x, Y, RPhi, I, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisSQAR1K1
arma::vec rwBmetropolisSQAR1K1(arma::vec x, arma::mat sd, int T, int L, int n, arma::cube Y, arma::mat RPhi, arma::mat I, double prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisSQAR1K1(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP nSEXP, SEXP YSEXP, SEXP RPhiSEXP, SEXP ISEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RPhi(RPhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisSQAR1K1(x, sd, T, L, n, Y, RPhi, I, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodSGPQAR1K1
double logLikelihoodSGPQAR1K1(int T, int L, int n, arma::cube Y, double gamma, arma::vec GP, arma::mat RPhi, arma::mat I, double tol);
RcppExport SEXP _QAR_logLikelihoodSGPQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP nSEXP, SEXP YSEXP, SEXP gammaSEXP, SEXP GPSEXP, SEXP RPhiSEXP, SEXP ISEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GP(GPSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RPhi(RPhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodSGPQAR1K1(T, L, n, Y, gamma, GP, RPhi, I, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallSGPQAR1K1
double logfallSGPQAR1K1(int T, int L, int n, arma::vec x, arma::cube Y, arma::mat RPhi, arma::mat Rinv, arma::mat I, arma::vec prior, double tol);
RcppExport SEXP _QAR_logfallSGPQAR1K1(SEXP TSEXP, SEXP LSEXP, SEXP nSEXP, SEXP xSEXP, SEXP YSEXP, SEXP RPhiSEXP, SEXP RinvSEXP, SEXP ISEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RPhi(RPhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rinv(RinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallSGPQAR1K1(T, L, n, x, Y, RPhi, Rinv, I, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisSGPQAR1K1
arma::vec rwBmetropolisSGPQAR1K1(arma::vec x, arma::mat sd, int T, int L, int n, arma::cube Y, arma::mat RPhi, arma::mat Rinv, arma::mat I, arma::vec prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisSGPQAR1K1(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP nSEXP, SEXP YSEXP, SEXP RPhiSEXP, SEXP RinvSEXP, SEXP ISEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RPhi(RPhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rinv(RinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisSGPQAR1K1(x, sd, T, L, n, Y, RPhi, Rinv, I, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// fKX2006
double fKX2006(double x, double y1, double y2, double mu, double sigma, double gamma0, double gamma1);
RcppExport SEXP _QAR_fKX2006(SEXP xSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP gamma0SEXP, SEXP gamma1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double >::type gamma1(gamma1SEXP);
    rcpp_result_gen = Rcpp::wrap(fKX2006(x, y1, y2, mu, sigma, gamma0, gamma1));
    return rcpp_result_gen;
END_RCPP
}
// brentKX2006
double brentKX2006(double y1, double y2, double mu, double sigma, double gamma0, double gamma1, double tol);
RcppExport SEXP _QAR_brentKX2006(SEXP y1SEXP, SEXP y2SEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP gamma0SEXP, SEXP gamma1SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(brentKX2006(y1, y2, mu, sigma, gamma0, gamma1, tol));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodKX2006
double logLikelihoodKX2006(int T, int L, arma::mat Y, double mu, double sigma, double gamma0, double gamma1, double tol);
RcppExport SEXP _QAR_logLikelihoodKX2006(SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP gamma0SEXP, SEXP gamma1SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodKX2006(T, L, Y, mu, sigma, gamma0, gamma1, tol));
    return rcpp_result_gen;
END_RCPP
}
// logfallKX2006
double logfallKX2006(int T, int L, arma::vec x, arma::mat Y, arma::vec prior, double tol);
RcppExport SEXP _QAR_logfallKX2006(SEXP TSEXP, SEXP LSEXP, SEXP xSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(logfallKX2006(T, L, x, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}
// rwBmetropolisKX2006
arma::vec rwBmetropolisKX2006(arma::vec x, arma::mat sd, int T, int L, arma::mat Y, arma::vec prior, double tol);
RcppExport SEXP _QAR_rwBmetropolisKX2006(SEXP xSEXP, SEXP sdSEXP, SEXP TSEXP, SEXP LSEXP, SEXP YSEXP, SEXP priorSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rwBmetropolisKX2006(x, sd, T, L, Y, prior, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QAR_dKumaraswamy", (DL_FUNC) &_QAR_dKumaraswamy, 3},
    {"_QAR_dKumaraswamyCube", (DL_FUNC) &_QAR_dKumaraswamyCube, 3},
    {"_QAR_pKumaraswamy", (DL_FUNC) &_QAR_pKumaraswamy, 3},
    {"_QAR_qKumaraswamy", (DL_FUNC) &_QAR_qKumaraswamy, 3},
    {"_QAR_logdnorm", (DL_FUNC) &_QAR_logdnorm, 2},
    {"_QAR_logdmvnorm", (DL_FUNC) &_QAR_logdmvnorm, 5},
    {"_QAR_MuSigmaUpdate", (DL_FUNC) &_QAR_MuSigmaUpdate, 4},
    {"_QAR_logitInv", (DL_FUNC) &_QAR_logitInv, 3},
    {"_QAR_logitInvVec", (DL_FUNC) &_QAR_logitInvVec, 3},
    {"_QAR_fQAR1K1", (DL_FUNC) &_QAR_fQAR1K1, 7},
    {"_QAR_brentQAR1K1", (DL_FUNC) &_QAR_brentQAR1K1, 7},
    {"_QAR_logLikelihoodQAR1K1", (DL_FUNC) &_QAR_logLikelihoodQAR1K1, 8},
    {"_QAR_logfallQAR1K1", (DL_FUNC) &_QAR_logfallQAR1K1, 6},
    {"_QAR_rwBmetropolisQAR1K1", (DL_FUNC) &_QAR_rwBmetropolisQAR1K1, 7},
    {"_QAR_fQAR1K2", (DL_FUNC) &_QAR_fQAR1K2, 13},
    {"_QAR_brentQAR1K2", (DL_FUNC) &_QAR_brentQAR1K2, 13},
    {"_QAR_logLikelihoodQAR1K2", (DL_FUNC) &_QAR_logLikelihoodQAR1K2, 14},
    {"_QAR_logfallQAR1K2", (DL_FUNC) &_QAR_logfallQAR1K2, 6},
    {"_QAR_rwBmetropolisQAR1K2", (DL_FUNC) &_QAR_rwBmetropolisQAR1K2, 7},
    {"_QAR_fQAR1K", (DL_FUNC) &_QAR_fQAR1K, 8},
    {"_QAR_brentQAR1K", (DL_FUNC) &_QAR_brentQAR1K, 8},
    {"_QAR_logLikelihoodQAR1K", (DL_FUNC) &_QAR_logLikelihoodQAR1K, 7},
    {"_QAR_logfallQAR1K", (DL_FUNC) &_QAR_logfallQAR1K, 8},
    {"_QAR_rwBmetropolisQAR1K", (DL_FUNC) &_QAR_rwBmetropolisQAR1K, 9},
    {"_QAR_fQAR2K1", (DL_FUNC) &_QAR_fQAR2K1, 11},
    {"_QAR_brentQAR2K1", (DL_FUNC) &_QAR_brentQAR2K1, 11},
    {"_QAR_logLikelihoodQAR2K1", (DL_FUNC) &_QAR_logLikelihoodQAR2K1, 11},
    {"_QAR_logfallQAR2K1", (DL_FUNC) &_QAR_logfallQAR2K1, 6},
    {"_QAR_rwBmetropolisQAR2K1", (DL_FUNC) &_QAR_rwBmetropolisQAR2K1, 7},
    {"_QAR_logLikelihoodMQAR1K1", (DL_FUNC) &_QAR_logLikelihoodMQAR1K1, 13},
    {"_QAR_logfallMQAR1K1", (DL_FUNC) &_QAR_logfallMQAR1K1, 6},
    {"_QAR_rwBmetropolisMQAR1K1", (DL_FUNC) &_QAR_rwBmetropolisMQAR1K1, 7},
    {"_QAR_logLikelihoodSQAR1K1", (DL_FUNC) &_QAR_logLikelihoodSQAR1K1, 12},
    {"_QAR_logfallSQAR1K1", (DL_FUNC) &_QAR_logfallSQAR1K1, 9},
    {"_QAR_rwBmetropolisSQAR1K1", (DL_FUNC) &_QAR_rwBmetropolisSQAR1K1, 10},
    {"_QAR_logLikelihoodSGPQAR1K1", (DL_FUNC) &_QAR_logLikelihoodSGPQAR1K1, 9},
    {"_QAR_logfallSGPQAR1K1", (DL_FUNC) &_QAR_logfallSGPQAR1K1, 10},
    {"_QAR_rwBmetropolisSGPQAR1K1", (DL_FUNC) &_QAR_rwBmetropolisSGPQAR1K1, 11},
    {"_QAR_fKX2006", (DL_FUNC) &_QAR_fKX2006, 7},
    {"_QAR_brentKX2006", (DL_FUNC) &_QAR_brentKX2006, 7},
    {"_QAR_logLikelihoodKX2006", (DL_FUNC) &_QAR_logLikelihoodKX2006, 8},
    {"_QAR_logfallKX2006", (DL_FUNC) &_QAR_logfallKX2006, 6},
    {"_QAR_rwBmetropolisKX2006", (DL_FUNC) &_QAR_rwBmetropolisKX2006, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_QAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
